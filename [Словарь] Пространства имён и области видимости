'''
Реализуйте программу, которая будет эмулировать работу с пространствами имен. Необходимо реализовать поддержку создания пространств имен и добавление в них переменных.

В данной задаче у каждого пространства имен есть уникальный текстовый идентификатор – его имя.

Вашей программе на вход подаются следующие запросы:

create <namespace> <parent> –  создать новое пространство имен с именем <namespace> внутри пространства <parent>
add <namespace> <var> – добавить в пространство <namespace> переменную <var>
get <namespace> <var> – получить имя пространства, из которого будет взята переменная <var> при запросе из пространства <namespace>, или None, если такого пространства не существует
Рассмотрим набор запросов

add global a
create foo global
add foo b
create bar foo
add bar a
Структура пространств имен описанная данными запросами будет эквивалентна структуре пространств имен, созданной при выполнении данного кода

a = 0
def foo():
  b = 1
  def bar():
    a = 2
В основном теле программы мы объявляем переменную a, тем самым добавляя ее в пространство global. Далее мы объявляем функцию foo, что влечет за собой создание локального для нее пространства имен внутри пространства global. В нашем случае, это описывается командой create foo global. Далее мы объявляем внутри функции foo функцию bar, тем самым создавая пространство bar внутри пространства foo, и добавляем в bar переменную a.

Добавим запросы get к нашим запросам

get foo a
get foo c
get bar a
get bar b
Представим как это могло бы выглядеть в коде

a = 0
def foo():
  b = 1
  get(a)
  get(c)
  def bar():
    a = 2
    get(a)
    get(b)
Результатом запроса get будет имя пространства, из которого будет взята нужная переменная.
Например, результатом запроса get foo a будет global, потому что в пространстве foo не объявлена переменная a, но в пространстве global, внутри которого находится пространство foo, она объявлена. Аналогично, результатом запроса get bar b будет являться foo, а результатом работы get bar a будет являться bar.

Результатом get foo c будет являться None, потому что ни в пространстве foo, ни в его внешнем пространстве global не была объявлена переменная с.

Более формально, результатом работы get <namespace> <var> является

<namespace>, если в пространстве <namespace> была объявлена переменная <var>
get <parent> <var> – результат запроса к пространству, внутри которого было создано пространство <namespace>, если переменная не была объявлена
None, если не существует <parent>, т. е. <namespace>﻿ – это global
Формат входных данных
В первой строке дано число n (1 ≤ n ≤ 100) – число запросов.
В каждой из следующих n строк дано по одному запросу.
Запросы выполняются в порядке, в котором они даны во входных данных.
Имена пространства имен и имена переменных представляют из себя строки длины не более 10, состоящие из строчных латинских букв.

Формат выходных данных
Для каждого запроса get выведите в отдельной строке его результат.



Sample Input:

9
add global a
create foo global
add foo b
get foo a
get foo c
create bar foo
add bar a
get bar a
get bar b
Sample Output:

global
None
bar
foo

Ссылка на python tutor:
https://pythontutor.com/visualize.html#code=n%20%3D%20int%28input%28%29%29%0A%0Aparent%20%3D%20%7B%22global%22%3A%20None%7D%0Avs%20%3D%20%7B%22global%22%3A%20set%28%29%7D%0A%0Afor%20_%20in%20range%28n%29%3A%0A%20%20%20%20t,%20fst,%20snd%20%3D%20input%28%29.split%28%29%0A%20%20%20%20if%20t%20%3D%3D%20%22create%22%3A%0A%20%20%20%20%20%20%20%20parent%5Bfst%5D%20%3D%20snd%0A%20%20%20%20%20%20%20%20vs%5Bfst%5D%20%3D%20set%28%29%0A%20%20%20%20elif%20t%20%3D%3D%20%22add%22%3A%0A%20%20%20%20%20%20%20%20vs%5Bfst%5D.add%28snd%29%0A%20%20%20%20else%3A%20%20%23%20t%20%3D%3D%20get%0A%20%20%20%20%20%20%20%20while%20fst%20is%20not%20None%3A%0A%20%20%20%20%20%20%20%20%20%20%20%20if%20snd%20in%20vs%5Bfst%5D%3A%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20break%0A%20%20%20%20%20%20%20%20%20%20%20%20fst%20%3D%20parent%5Bfst%5D%0A%20%20%20%20%20%20%20%20print%28fst%29&cumulative=false&curInstr=71&heapPrimitives=nevernest&mode=display&origin=opt-frontend.js&py=3&rawInputLstJSON=%5B%229%22,%22add%20global%20a%22,%22create%20foo%20global%22,%22add%20foo%20b%22,%22get%20foo%20a%22,%22get%20foo%20c%22,%22create%20bar%20foo%22,%22add%20bar%20a%22,%22get%20bar%20a%22,%22get%20bar%20b%22%5D&textReferences=false
'''


n = int(input())
scopes = {'global': {'funcs': [], 'vars': []}}

def add(scopes, current_namespace, what):
    if current_namespace not in scopes:
        scopes[current_namespace] = {}
        scopes[current_namespace]['vars'] = []
        scopes[current_namespace]['vars'].append(what)
    else:
        if 'vars' not in scopes[current_namespace]:
            scopes[current_namespace]['vars'] = []
            scopes[current_namespace]['vars'].append(what)
        else:
            scopes[current_namespace]['vars'].append(what)

def create(scopes, current_namespace, parent_namespace):
    if current_namespace not in scopes:
        scopes[current_namespace] = {}
        scopes[current_namespace]['funcs'] = []
        scopes[current_namespace]['vars'] = []
        scopes[parent_namespace]['funcs'].append(current_namespace)
        scopes[current_namespace]['parent'] = parent_namespace
    else:
        if 'funcs' not in scopes[current_namespace]:
            scopes[current_namespace]['funcs'] = []
            scopes[current_namespace]['parent'] = parent_namespace
            scopes[parent_namespace]['funcs'].append(current_namespace)
        else:
            scopes[current_namespace]['funcs'].append(current_namespace)
            scopes[parent_namespace]['funcs'].append(current_namespace)

def search(scopes, namespace, what):
    if what in scopes[namespace]['vars']:
        return namespace
    else:
        try:
            upper_namespace = scopes[namespace]['parent']
        except KeyError:
            return None
        return search(scopes, upper_namespace, what)

for i in range(n):
    command = input().split()
    if command[0] == 'add':
        add(scopes, command[1], command[2])
    elif command[0] == 'create':
        create(scopes, command[1], command[2])
    elif command[0] == 'get':
        print(search(scopes, command[1], command[2]))
