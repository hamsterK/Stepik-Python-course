'''
Реализуйте класс MoneyBox, для работы с виртуальной копилкой.

Каждая копилка имеет ограниченную вместимость, которая выражается целым числом – количеством монет, которые можно положить в копилку. Класс должен поддерживать информацию о количестве монет в копилке, предоставлять возможность добавлять монеты в копилку и узнавать, можно ли добавить в копилку ещё какое-то количество монет, не превышая ее вместимость.

Класс должен иметь следующий вид

class MoneyBox:
    def __init__(self, capacity):
        # конструктор с аргументом – вместимость копилки

    def can_add(self, v):
        # True, если можно добавить v монет, False иначе

    def add(self, v):
        # положить v монет в копилку
При создании копилки, число монет в ней равно 0.
Примечание:
Гарантируется, что метод add(self, v) будет вызываться только если can_add(self, v) – True.

https://pythontutor.com/visualize.html#code=class%20MoneyBox%3A%0A%20%20%20%20def%20__init__%28self,%20capacity%29%3A%0A%20%20%20%20%20%20%20%20self.capacity%20%3D%20capacity%0A%20%20%20%20%20%20%20%20self.count%20%3D%200%0A%0A%20%20%20%20def%20can_add%28self,%20v%29%3A%0A%20%20%20%20%20%20%20%20return%20self.count%20%2B%20v%20%3C%3D%20self.capacity%0A%0A%20%20%20%20def%20add%28self,%20v%29%3A%0A%20%20%20%20%20%20%20%20if%20self.can_add%28v%29%3A%0A%20%20%20%20%20%20%20%20%20%20%20%20self.count%20%2B%3D%20v%0A%0A%0Ax%20%3D%20MoneyBox%2815%29%0Ax.add%285%29%0Ax.add%289%29%0Ax.add%283%29&cumulative=false&curInstr=29&heapPrimitives=nevernest&mode=display&origin=opt-frontend.js&py=3&rawInputLstJSON=%5B%5D&textReferences=false
'''




class MoneyBox:
    def __init__(self, capacity):
        self.capacity = capacity
        self.count = 0

    def can_add(self, v):
        return self.count + v <= self.capacity

    def add(self, v):
        if self.can_add(v):
            self.count += v


x = MoneyBox(15)
x.add(5)
x.add(9)
x.add(3)
