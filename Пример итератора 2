
class multifilter:
    def judge_half(pos, neg):
        # допускает элемент, если его допускает хотя бы половина фукнций (pos >= neg)
        return pos >= neg

    def judge_any(pos, neg):
        # допускает элемент, если его допускает хотя бы одна функция (pos >= 1)
        return pos >= 1

    def judge_all(pos, neg):
        # допускает элемент, если его допускают все функции (neg == 0)
        return neg == 0

    def __init__(self, iterable, *funcs, judge=judge_any):
        # iterable - исходная последовательность
        # funcs - допускающие функции
        # judge - решающая функция
        self.it = iter(iterable)
        self.funcs = funcs
        self.judge = judge

    def __iter__(self):
        # возвращает итератор по результирующей последовательности
        return self

    def __next__(self):  # объект является итератором, когда у него есть данный метод
        x = next(self.it)
        p = 0
        n = 0
        for foo in self.funcs:
            if foo(x):
                p += 1
            else:
                n += 1
        if self.judge(p, n):
            return x
        else:
            return next(self)
