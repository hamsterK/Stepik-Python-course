'''
Реализуйте структуру данных, представляющую собой расширенную структуру стек. Необходимо поддерживать добавление элемента на вершину стека, удаление с вершины стека, и необходимо поддерживать операции сложения, вычитания, умножения и целочисленного деления.

Операция сложения на стеке определяется следующим образом. Со стека снимается верхний элемент (top1), затем снимается следующий верхний элемент (top2), и затем как результат операции сложения на вершину стека кладется элемент, равный top1 + top2.

Аналогичным образом определяются операции вычитания (top1 - top2), умножения (top1 * top2) и целочисленного деления (top1 // top2).

Реализуйте эту структуру данных как класс ExtendedStack, отнаследовав его от стандартного класса list.
Требуемая структура класса:

class ExtendedStack(list):
    def sum(self):
        # операция сложения

    def sub(self):
        # операция вычитания

    def mul(self):
        # операция умножения

    def div(self):
        # операция целочисленного деления
 
Примечание
Для добавления элемента на стек используется метод append, а для снятия со стека – метод pop.
Гарантируется, что операции будут совершаться только когда в стеке есть хотя бы два элемента.

https://pythontutor.com/visualize.html#code=class%20ExtendedStack%28list%29%3A%0A%20%20%20%20def%20sum%28self%29%3A%0A%20%20%20%20%20%20%20%20op1,%20op2%20%3D%20self.pop%28%29,%20self.pop%28%29%0A%20%20%20%20%20%20%20%20self.append%28op1%20%2B%20op2%29%0A%0A%20%20%20%20def%20sub%28self%29%3A%0A%20%20%20%20%20%20%20%20op1,%20op2%20%3D%20self.pop%28%29,%20self.pop%28%29%0A%20%20%20%20%20%20%20%20self.append%28op1%20-%20op2%29%0A%0A%20%20%20%20def%20mul%28self%29%3A%0A%20%20%20%20%20%20%20%20op1,%20op2%20%3D%20self.pop%28%29,%20self.pop%28%29%0A%20%20%20%20%20%20%20%20self.append%28op1%20*%20op2%29%0A%0A%20%20%20%20def%20div%28self%29%3A%0A%20%20%20%20%20%20%20%20op1,%20op2%20%3D%20self.pop%28%29,%20self.pop%28%29%0A%20%20%20%20%20%20%20%20self.append%28op1%20//%20op2%29%0A%20%20%20%20%20%20%20%20%0Adef%20test%28%29%3A%0A%20%20%20%20ex_stack%20%3D%20ExtendedStack%28%5B1,%202,%203,%204,%20-3,%203,%205,%2010%5D%29%0A%20%20%20%20ex_stack.div%28%29%0A%20%20%20%20assert%20ex_stack.pop%28%29%20%3D%3D%202%0A%20%20%20%20ex_stack.sub%28%29%0A%20%20%20%20assert%20ex_stack.pop%28%29%20%3D%3D%206%0A%20%20%20%20ex_stack.sum%28%29%0A%20%20%20%20assert%20ex_stack.pop%28%29%20%3D%3D%207%0A%20%20%20%20ex_stack.mul%28%29%0A%20%20%20%20assert%20ex_stack.pop%28%29%20%3D%3D%202%0A%20%20%20%20assert%20len%28ex_stack%29%20%3D%3D%200%0A%20%20%20%20%0Atest%28%29&cumulative=false&heapPrimitives=nevernest&mode=edit&origin=opt-frontend.js&py=3&rawInputLstJSON=%5B%5D&textReferences=false

'''

class ExtendedStack(list):
    def sum(self):
        op1, op2 = self.pop(), self.pop()
        self.append(op1 + op2)

    def sub(self):
        op1, op2 = self.pop(), self.pop()
        self.append(op1 - op2)

    def mul(self):
        op1, op2 = self.pop(), self.pop()
        self.append(op1 * op2)

    def div(self):
        op1, op2 = self.pop(), self.pop()
        self.append(op1 // op2)
